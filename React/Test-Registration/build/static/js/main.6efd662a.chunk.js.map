{"version":3,"sources":["components/Timeline/Timeline.module.css","components/Navbar/Navbar.module.css","components/RegistrationForm/RegistrationForm.module.css","serviceWorker.js","Redux/registration-reducer.js","Redux/address-reducer.js","Redux/categories-reducer.js","Redux/redux-store.js","components/Timeline/Timeline.jsx","components/RegistrationForm/RegistrationForm.jsx","components/Address/AddressForm.jsx","components/Categories/CategoriesForm.jsx","components/Success/SuccessForm.jsx","components/Navbar/Navbar.jsx","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","initialState","email","password","passwordConfirm","registrationReducer","state","action","type","newText","country","city","address","addressReducer","category1","category2","category3","categoriesReducer","reducers","combineReducers","post","store","createStore","Timeline","className","s","breadcrump","href","text","active","Component","RegistrationForm","nextProps","nextState","this","props","newEmailElement","React","createRef","newPasswordElement","newPasswordConfirmElement","block","timelineSuccess","onChange","current","value","dispatch","ref","placeholder","next","Address","newCountryElement","newCityElement","newAddressElement","Categories","newCategory1Element","newCategory2Element","newCategory3Element","Success","timeline","text1","text2","text3","Navbar","style","nav","item","App","exact","path","component","render","rerenderEntireTree","ReactDOM","getState","bind","document","getElementById","subscribe","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6efd662a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"breadcrump\":\"Timeline_breadcrump__2ZxaG\",\"text\":\"Timeline_text__18B-r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__22Mk_\",\"item\":\"Navbar_item__2IwlG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"RegistrationForm_block__rBjN7\",\"next\":\"RegistrationForm_next__vSAB2\",\"nav\":\"RegistrationForm_nav__2iAg9\",\"timelineSuccess\":\"RegistrationForm_timelineSuccess__3zDe-\",\"timeline\":\"RegistrationForm_timeline__1BwzI\",\"text1\":\"RegistrationForm_text1__dCRWE\",\"text2\":\"RegistrationForm_text2__DwltO\",\"text3\":\"RegistrationForm_text3__1FqsZ\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const EMAIL_TEXT = 'EMAIL-TEXT';\r\nconst PASSWORD_TEXT = 'PASSWORD-TEXT'\r\nconst PASSWORD_CONFIRM_TEXT = 'PASSWORD-CONFIRM-TEXT';\r\n\r\nlet initialState = {\r\n        email: '',\r\n        password: '',\r\n        passwordConfirm: '',\r\n}\r\n\r\nconst registrationReducer = (state = initialState, action) => {\r\n    \r\n    switch (action.type){\r\n        case EMAIL_TEXT: \r\n        state.email = action.newText;\r\n        return state;\r\n    }\r\n    switch (action.type){\r\n        case PASSWORD_TEXT:\r\n        state.password = action.newText;\r\n        return state;\r\n    }\r\n    switch (action.type){\r\n        case PASSWORD_CONFIRM_TEXT:\r\n        state.passwordConfirm = action.newText;\r\n        return state;\r\n    default:\r\n        return state;\r\n    } \r\n}\r\n\r\nconst registrationEmailActionCreator = (text) => {return ({type: EMAIL_TEXT, newText: text});}\r\nconst registrationPasswordActionCreator = (text) => {return ({type: PASSWORD_TEXT, newText: text});}\r\nconst registrationPasswordConfirmActionCreator = (text) => {return ({type: PASSWORD_CONFIRM_TEXT, newText: text});}\r\n\r\nexport default registrationReducer;","const COUNTRY_TEXT = 'COUNTRY-TEXT';\r\nconst CITY_TEXT = 'CITY-TEXT'\r\nconst ADDRESS_TEXT = 'ADDRESS-TEXT';\r\n\r\nlet initialState = {\r\n        country: '',\r\n        city: '',\r\n        address: '',\r\n}\r\n\r\nconst addressReducer = (state = initialState, action) => {\r\n    \r\n    switch (action.type){\r\n        case COUNTRY_TEXT: \r\n        state.country = action.newText;\r\n        return state;\r\n    }\r\n    switch (action.type){\r\n        case CITY_TEXT:\r\n        state.city = action.newText;\r\n        return state;\r\n    }\r\n    switch (action.type){\r\n        case ADDRESS_TEXT:\r\n        state.address = action.newText;\r\n        return state;\r\n    default:\r\n        return state;\r\n    } \r\n}\r\n\r\nconst countryActionCreator = (text) => {return ({type: COUNTRY_TEXT, newText: text});}\r\nconst cityActionCreator = (text) => {return ({type: CITY_TEXT, newText: text});}\r\nconst addressActionCreator = (text) => {return ({type: ADDRESS_TEXT, newText: text});}\r\n\r\nexport default addressReducer;","const CATEGORY1_TEXT = 'CATEGORY1-TEXT';\r\nconst CATEGORY2_TEXT = 'CATEGORY2-TEXT'\r\nconst CATEGORY3_TEXT = 'CATEGORY3-TEXT';\r\n\r\nlet initialState = {\r\n        category1: '',\r\n        category2: '',\r\n        category3: '',\r\n}\r\n\r\nconst categoriesReducer = (state = initialState, action) => {\r\n    \r\n    switch (action.type){\r\n        case CATEGORY1_TEXT:\r\n        state.category1 = action.newText;\r\n        return state;\r\n    }\r\n    switch (action.type){\r\n        case CATEGORY2_TEXT:\r\n        state.category2 = action.newText;\r\n        return state;\r\n    }\r\n    switch (action.type){\r\n        case CATEGORY3_TEXT:\r\n        state.category3 = action.newText;\r\n        return state;\r\n    default:\r\n        return state;\r\n    } \r\n}\r\n\r\nconst category1ActionCreator = (text) => {return ({type: CATEGORY1_TEXT, newText: text});}\r\nconst category2ActionCreator = (text) => {return ({type: CATEGORY2_TEXT, newText: text});}\r\nconst category3ActionCreator = (text) => {return ({type: CATEGORY3_TEXT, newText: text});}\r\n\r\nexport default categoriesReducer;","import {createStore, combineReducers} from 'redux';\r\nimport registrationReducer from './registration-reducer';\r\nimport addressReducer from './address-reducer';\r\nimport categoriesReducer from './categories-reducer';\r\n\r\nlet reducers = combineReducers({\r\n    email: registrationReducer,\r\n    address: addressReducer,\r\n    post: categoriesReducer\r\n});\r\n\r\nlet store = createStore(reducers);\r\nwindow.store = store;\r\nexport default store;","import React, {Component} from 'react';\r\nimport s from './Timeline.module.css';\r\n\r\nclass Timeline extends Component {\r\n\r\n    render(){\r\n        return(\r\n            <ul className={s.breadcrump}>\r\n                <li>\r\n                    <a href=\"/RegistrationForm\">                        \r\n                        <span className={s.text } active>CONTACTS</span>\r\n                    </a>\r\n                </li>\r\n                <li>\r\n                    <a href=\"/Address\">\r\n                        <span className={s.text}>ADDRESS</span>\r\n                    </a>\r\n                </li>\r\n                <li>\r\n                    <a href=\"/Categories\">\r\n                        <span className={s.text}>CATEGORIES</span>\r\n                    </a>\r\n                </li>\r\n                <li>\r\n                    <a href=\"/Success\">\r\n                        <span className={s.text}>SUCCESS</span>\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Timeline;","import React, {Component} from 'react';\r\nimport s from './RegistrationForm.module.css';\r\nimport Timeline from './../Timeline/Timeline';\r\n\r\nclass RegistrationForm extends Component {\r\n    \r\n    shouldComponentUpdate(nextProps, nextState){\r\n        return nextProps != this.props || nextState != this.state;\r\n    };\r\nrender(){\r\n\r\n\r\n    let newEmailElement = React.createRef();\r\n    let newPasswordElement = React.createRef();\r\n    let newPasswordConfirmElement = React.createRef();\r\n    \r\n    let emailPost = () => {\r\n        this.props.dispatch({ type: 'EMAIL-TEXT' })\r\n    }\r\n    let passwordPost = () => {\r\n        this.props.dispatch({ type: 'PASSWORD-TEXT' })\r\n    }\r\n    let passwordConfirmPost = () => {\r\n        this.props.dispatch({ type: 'PASSWORD-CONFIRM-TEXT' })\r\n    }\r\n\r\n    let onEmailChange = () => {\r\n        let text = newEmailElement.current.value;\r\n        this.props.dispatch({ type: 'EMAIL-TEXT', newText: text });\r\n    }\r\n    let onPasswordChange = () => {\r\n        let text = newPasswordElement.current.value;\r\n        this.props.dispatch({ type: 'PASSWORD-TEXT', newText: text });\r\n    }\r\n    let onPasswordConfirmChange = () => {\r\n        let text = newPasswordConfirmElement.current.value;\r\n        this.props.dispatch({ type: 'PASSWORD-CONFIRM-TEXT', newText: text });\r\n    }\r\n\r\n    return(   \r\n        <div className={s.block}>\r\n            <form>\r\n            <div className={s.timelineSuccess}>\r\n                <Timeline />\r\n            </div>\r\n                <span>Email</span>\r\n            <div>\r\n                    <input onChange={onEmailChange} ref={newEmailElement} placeholder={'email'} value={this.props.post.email}/>\r\n            </div>\r\n            <span>Password</span>\r\n            <div>\r\n                    <input onChange={onPasswordChange} ref={newPasswordElement} placeholder={'password'} value={this.props.post.password} />\r\n            </div>\r\n            <span>Password Confirm</span>\r\n            <div>\r\n                    <input onChange={onPasswordConfirmChange} ref={newPasswordConfirmElement} placeholder={'password confirm'} value={this.props.post.passwordConfirm} />\r\n            </div>\r\n                <button className={s.next}><a href='/Address'>NEXT</a></button>    \r\n            </form>\r\n        </div>\r\n    );}\r\n}\r\n\r\nexport default RegistrationForm;","import React from 'react';\r\nimport s from './../RegistrationForm/RegistrationForm.module.css';\r\nimport Timeline from '../Timeline/Timeline';\r\n\r\nconst Address = (props) => {\r\n\r\n    let newCountryElement = React.createRef();\r\n    let newCityElement = React.createRef();\r\n    let newAddressElement = React.createRef();\r\n    \r\n    let countryPost = () => {\r\n        props.dispatch({ type: 'COUNTRY-TEXT' })\r\n    }\r\n    let cityPost = () => {\r\n        props.dispatch({ type: 'CITY-TEXT' })\r\n    }\r\n    let addressPost = () => {\r\n        props.dispatch({ type: 'ADDRESS-TEXT' })\r\n    }\r\n    \r\n    let onCountryChange = () => {\r\n        let text = newCountryElement.current.value;\r\n        props.dispatch({ type: 'COUNTRY-TEXT', newText: text });\r\n    }\r\n    let onCityChange = () => {\r\n        let text = newCityElement.current.value;\r\n        props.dispatch({ type: 'CITY-TEXT', newText: text });\r\n    }\r\n    let onAddressChange = () => {\r\n        let text = newAddressElement.current.value;\r\n        props.dispatch({ type: 'ADDRESS-TEXT', newText: text });\r\n    }\r\n\r\n    return (\r\n        <div className={s.block}>\r\n            <form>\r\n                <div className={s.timelineSuccess}>\r\n                    <Timeline />\r\n                </div>\r\n                <span>Country</span>\r\n                <div>\r\n                    <input onChange={onCountryChange} ref={newCountryElement} placeholder={'country'} value={props.post.country} />\r\n                </div>\r\n                <span>City</span>\r\n                <div>\r\n                    <input onChange={onCityChange} ref={newCityElement} placeholder={'City'} value={props.post.city} />\r\n                </div>\r\n                <span>Address</span>\r\n                <div>\r\n                    <input onChange={onAddressChange} ref={newAddressElement} placeholder={'address'} value={props.post.address} />\r\n                </div>\r\n                   <button className={s.next}><a href='/Categories'>NEXT</a></button> \r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Address;","import React from 'react';\r\nimport s from './../RegistrationForm/RegistrationForm.module.css';\r\nimport Timeline from '../Timeline/Timeline';\r\n\r\nconst Categories = (props) => {\r\n\r\n    let newCategory1Element = React.createRef();\r\n    let newCategory2Element = React.createRef();\r\n    let newCategory3Element = React.createRef();\r\n\r\n    let category1Post = () => {\r\n        props.dispatch({ type: 'CATEGORY1-TEXT' })\r\n    }\r\n    let category2Post = () => {\r\n        props.dispatch({ type: 'CATEGORY2-TEXT' })\r\n    }\r\n    let category3Post = () => {\r\n        props.dispatch({ type: 'CATEGORY3-TEXT' })\r\n    }\r\n\r\n    let onCategory1Change = () => {\r\n        let text = newCategory1Element.current.value;\r\n        props.dispatch({ type: 'CATEGORY1-TEXT', newText: text });\r\n    }\r\n    let onCategory2Change = () => {\r\n        let text = newCategory2Element.current.value;\r\n        props.dispatch({ type: 'CATEGORY2-TEXT', newText: text });\r\n    }\r\n    let onCategory3Change = () => {\r\n        let text = newCategory3Element.current.value;\r\n        props.dispatch({ type: 'CATEGORY3-TEXT', newText: text });\r\n    }\r\n\r\n    return (\r\n        <div className={s.block}>\r\n            <form>\r\n                <div className={s.timelineSuccess}>\r\n                    <Timeline />\r\n                </div>\r\n                <span>Categories 1</span>\r\n                <div>\r\n                    <input onChange={onCategory1Change} ref={newCategory1Element} placeholder={'category1'} value={props.post.category1} />\r\n                </div>\r\n                <span>Categories 2</span>\r\n                <div>\r\n                    <input onChange={onCategory2Change} ref={newCategory2Element} placeholder={'category2'} value={props.post.category2} />\r\n                </div>\r\n                <span>Categories 3</span>\r\n                <div>\r\n                    <input onChange={onCategory3Change} ref={newCategory3Element} placeholder={'category3'} value={props.post.category3} />\r\n                </div>\r\n                <button className={s.next}><a href='/Success'>NEXT</a></button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Categories;","import React, {Component} from 'react';\r\nimport s from './../RegistrationForm/RegistrationForm.module.css';\r\nimport Timeline from './../Timeline/Timeline';\r\n\r\nclass Success extends Component {\r\n\r\n    render(){\r\n        return(   \r\n            <div className={s.block}>\r\n                <form>\r\n                    <div className={s.timeline}>\r\n                        <Timeline />\r\n                    </div>\r\n\r\n                    <h2 className={s.text1}>Success</h2>\r\n                    <h3 className={s.text2}> Your account was successfuly registered.<br/>\r\n                        Please wait for account approval. <br/>\r\n                        It cantake up to 24 hours.\r\n                    </h3>\r\n                    <h3 className={s.text3}>\r\n                            Have questions?<br/>\r\n                            Contact info@site.com\r\n                    </h3> \r\n                    \r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Success;","import React from 'react';\r\nimport style from './Navbar.module.css';\r\n\r\nconst Navbar = () => {\r\n    return(\r\n        <nav className={style.nav}>\r\n                <button className={style.item}><a href='/RegistrationForm'>Welcome to registration</a></button>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\nimport'./App.css';\nimport RegistrationForm from './components/RegistrationForm/RegistrationForm';\nimport Address from './components/Address/AddressForm';\nimport Categories from './components/Categories/CategoriesForm';\nimport Success from './components/Success/SuccessForm';\nimport { Route, Switch } from 'react-router-dom';\nimport Navbar from './components/Navbar/Navbar'\nfunction App(props) {\n  return (\n      <div className={'app-wrapper-content'}>\n        <Navbar exact path='localhost:3000' component={Navbar} />\n        <Route path='/RegistrationForm' render={() => <RegistrationForm dispatch={props.dispatch} post={props.state.post}/>}/>\n        <Route path='/Address' render={() => <Address dispatch={props.dispatch} post={props.state.post}/>}/>\n        <Route path='/Categories' render={() => <Categories dispatch={props.dispatch} post={props.state.post}/>}/>\n        <Route path='/Success' render={() => <Success />}/>\n      </div>\n  );\n}\n\nexport default App;\n","import * as serviceWorker from './serviceWorker';\nimport store from './Redux/redux-store';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n\nlet rerenderEntireTree = (state) => {\n    \n    ReactDOM.render(\n        <BrowserRouter>\n            <App state={store.getState()} \n                 dispatch={store.dispatch.bind(store)}/>\n        </BrowserRouter>, document.getElementById('root'));\n}\n\nrerenderEntireTree(store.getState());\n\nstore.subscribe(()=>{\n    let state = store.getState();\n    rerenderEntireTree(state);\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}